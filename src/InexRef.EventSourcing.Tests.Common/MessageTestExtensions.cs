#region Copyright & License
// The MIT License (MIT)
// 
// Copyright 2017-2019 INEX Solutions Ltd
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#endregion

using System;
using System.Collections.Generic;
using System.Linq;
using InexRef.EventSourcing.Common;
using InexRef.EventSourcing.Contracts.Messages;
using InexRef.EventSourcing.Tests.Common.SpecificationFramework;

namespace InexRef.EventSourcing.Tests.Common
{
    public static class MessageTestExtensions
    {
        public static bool HasSameSourceCorrectionIdAs(this IMessage actual, IMessage expected)
            => actual.MessageMetadata.SourceCorrelationId == expected.MessageMetadata.SourceCorrelationId;

        public static bool WasSentAfter(this IMessage laterMessage, IMessage previousMessage)
            => laterMessage.MessageMetadata.MessageDateTime > previousMessage.MessageMetadata.MessageDateTime;

        public static void ShouldContain<TItem>(this IEnumerable<IMessage> collection, Func<TItem, bool> criteria)
            where TItem : IMessage
        {
            collection.ShouldContain<IMessage, TItem>(criteria);
        }

        public static GeneratedByTest<TEvent> ContainsEvent<TEvent>(this IRecordedBusMessages recordedMessages)
            where TEvent : IEvent
        {
            var eventsWithMatchingTypes = recordedMessages.RecordedEvents.OfType<TEvent>().ToList();

            if (!eventsWithMatchingTypes.Any())
            {
                throw new SpecificationException($"None of the recorded events were of type {typeof(TEvent).Name}.\n" +
                                                 $"Actual events:\n{recordedMessages.RecordedEvents.ToBulletList()}");
            }

            return new GeneratedByTest<TEvent>(recordedMessages.RecordedEvents.ToList(), eventsWithMatchingTypes);
        }

        public class GeneratedByTest<TEvent> where TEvent : IEvent
        {
            private readonly IList<IEvent> _allEvents;
            private readonly List<TEvent> _eventsWithMatchingTypes;

            public GeneratedByTest(
                IList<IEvent> allEvents,
                List<TEvent> eventsWithMatchingTypes)
            {
                _allEvents = allEvents;
                _eventsWithMatchingTypes = eventsWithMatchingTypes;
            }

            public WhereTest<TEvent> GeneratedBy(ICommand command)
            {
                var matches = _eventsWithMatchingTypes
                    .Where(@event => @event.HasSameSourceCorrectionIdAs(command)
                                     && @event.WasSentAfter(command))
                    .ToList();

                if (!matches.Any())
                {
                    throw new SpecificationException($"None of the recorded events of type {typeof(TEvent).Name} were generated by the supplied command (either SourceCorrelationId did not match, or they were not sent after the command).\n" +
                                                     $"Actual events:\n{_allEvents.ToBulletList()}");
                }

                return new WhereTest<TEvent>(_allEvents, matches);
            }
        }

        public class WhereTest<TEvent> where TEvent : IEvent
        {
            private readonly IList<IEvent> _allEvents;
            private readonly IEnumerable<TEvent> _events;

            public WhereTest(IList<IEvent> allEvents, IEnumerable<TEvent> events)
            {
                _allEvents = allEvents;
                _events = events;
            }

            public void Where(Func<TEvent, bool> criteria)
            {
                var matches = _events.Where(criteria)
                    .ToList();

                if (!matches.Any())
                {
                    throw new SpecificationException($"None of the recorded events of type {typeof(TEvent).Name} that were generated by the supplied command matched the where criteria.\n" +
                                                     $"Actual events:{_allEvents.ToBulletList()}\n");
                }
            }
        }       
    }
}